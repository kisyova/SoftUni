Programming languages:

1. Python - widely used high-level programming language. Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in other languages. Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library. If we have to compare Python to C# here is a few sentences - Python is better for beginners in programming, it is more flexible and readable, it is better for using in scientific projects and it is with good documentation. But C# is better for embedded programs, for mobile applications, for really large projects and we have to tell that C# is considered as a large language also.

2. Java -  programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "write once, run anywhere" (WORA), meaning that code that runs on one platform does not need to be recompiled to run on another. Java applications are typically compiled to bytecode (class file) that can run on any Java virtual machine (JVM) regardless of computer architecture. The language derives much of its syntax from C and C++, but it has fewer low-level facilities than either of them. C# is younger than Java and it is more understandable because its creators have seen other languages and they knew what new to introduce and what should not be there. The IDE of .NET is better. Both languages actually have a lot of similarities which come generally from C, C++. Programming C# on Linux is not very developed and famous but Java takes advantage here and it is more recommedned for Linux than C#.

3. C++ -  general purpose programming language that is free-form and compiled. It is regarded as an intermediate-level language, as it comprises both high-level and low-level language features. It provides imperative, object-oriented and generic programming features. It is one of the most popular programming languages and is implemented on a wide variety of hardware and operating system platforms. As an efficient performance driven programming language it is used in systems software, application software, device drivers, embedded software, high-performance server and client applications, and entertainment software. C++ has a multiple inheritance of implementation, C# does not. C++ includes a very powerful—and more complex and difficult to master—template meta language, C# originally had nothing like it. C# uses a garbage collector as part of the language specifications. Many garbage collectors are available for C++, but this is not built into the language.
C# has delegates, which are a powerful alternative to C++'s function pointers and pointers-to-members. C# has syntax for properties and events. C# has syntax that enforces such things as non-overridable members, non-inheritable, and static classes.

4. Ruby - dynamic, reflective, object-oriented, general-purpose programming language. Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, and Lisp. It supports multiple programming paradigms, including functional, object-oriented, and imperative. It also has a dynamic type system and automatic memory management. The syntax of Ruby is broadly similar to that of Perl and Python. Class and method definitions are signaled by keywords. In contrast to Perl, variables are not obligatorily prefixed with a sigil. When used, the sigil changes the semantics of scope of the variable. For practical purposes there is no distinction between expressions and statements. 

5. JavaScript - most commonly used as part of web browsers, whose implementations allow client-side scripts to interact with the user, control the browser, communicate asynchronously, and alter the document content that is displayed. It is also being used in server-side programming, game development and the creation of desktop and mobile applications. JavaScript is a prototype-based scripting language with dynamic typing and has first-class functions. Its syntax was influenced by C. JavaScript copies many names and naming conventions from Java, but the two languages are otherwise unrelated and have very different semantics. It is a multi-paradigm language, supporting object-oriented, imperative, and functional programming styles. 